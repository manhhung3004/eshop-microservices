stages:
  - source
  - test
  - build
  - scan
  - deploy

.default_rules: &default_rules
  rules:
    - when: always 
    - allow_failure: false

.cd_rules: &cd_rules
  rules:
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^feature-.*$/ && 
           $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"'
      when: always
    - when: never

.cd_rules_prod: &cd_rules_prod
  rules:
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == "dev" && 
           $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "prod"'
      when: always
    - when: never

default-job-cart:
  <<: *default_rules
  stage: .pre
  script:
    - echo "nameserver 8.8.8.8" > /etc/resolv.conf

before_script:
  - cd src/cart

build-artifact-cart:
  <<: *default_rules
  image: maven:3.9.9-amazoncorretto-23-alpine
  stage: source
  script:
    - mkdir -p ~/.m2
    - cp settings.xml ~/.m2/settings.xml
    - mvn dependency:go-offline -B -q
    - mvn -DskipTests package -X
    - ls -la
  artifacts:
    paths:
      - src/cart/target/*
    expire_in: 30 minutes

test-cart:
  <<: *default_rules
  image: maven:3.9.9-amazoncorretto-23-alpine
  stage: test
  dependencies:
    - build-artifact-cart
  script:
    - mkdir -p ~/.m2
    - cp settings.xml ~/.m2/settings.xml
    - mvn -DskipTests clean test -q
  artifacts:
    paths:
      - target/surefire-reports/*.xml
    expire_in: 10 minutes

sonarqube-check-cart:
  <<: *default_rules
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  stage: test
  needs: 
    - build-artifact-cart
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner 
      -X
      -Dsonar.projectKey=retail-store-cart
      -Dsonar.projectName=retail-store-cart
      -Dsonar.sources=target/
      -Dsonar.java.binaries=target/classes
      -Dsonar.host.url=http://192.168.120.36:30010
      -Dsonar.login=$SONAR_TOKEN_CART
      -Dsonar.qualitygate.wait=true

build-docker-cart:
  stage: build
  image: docker:20.10.16
  tags:
    - docker-in-docker
  dependencies:
    - build-artifact-cart
  rules:
    - !reference [.cd_rules, rules]
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  script:
    - ls -la
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY_URL_HOST
    - export TAG_CLEAN=$(echo $TAG | sed 's/[^a-zA-Z0-9_.-]//g')
    - docker pull $CI_REGISTRY_IMAGE_CART:latest || true
    - >
      docker build
      --cache-from $CI_REGISTRY_IMAGE_CART:latest
      -f Dockerfile
      --build-arg BUILD_PATH=build/ 
      -t temp_image_cart  
      .

    - docker save temp_image_cart > image_cart.tar
  artifacts:
    paths:
      - src/cart/image_cart.tar
    expire_in: 15 minutes
    
trivy-scan-cart:
  stage: scan
  image: docker:20.10.16
  tags:
    - docker-in-docker
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  rules:
    - !reference [.cd_rules, rules]
  script:
    - apk add curl
    - docker info
    - |
      echo "Attempting to log in to registry..."
      MAX_RETRIES=3
      RETRY_COUNT=0
      LOGIN_SUCCESS=false

      while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$LOGIN_SUCCESS" = false ]; do
        if docker login -u admin -p 123 http://192.168.120.24; then
          LOGIN_SUCCESS=true
          echo "Login successful"
        elif docker login --insecure-registry -u admin -p 123 http://192.168.120.24; then
          LOGIN_SUCCESS=true
          echo "Login successful (insecure)"
        else
          RETRY_COUNT=$((RETRY_COUNT+1))
          echo "Login attempt $RETRY_COUNT failed. Retrying in 5 seconds..."
          sleep 5
        fi
      done

      if [ "$LOGIN_SUCCESS" = false ]; then
        echo "Failed to log in after $MAX_RETRIES attempts. Exiting."
        exit 1
      fi

    - echo "Login successful, proceeding with build and push..."
    - curl -sfl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- latest
    - ls -la ./bin/trivy
    - export PATH=$PATH:/usr/local/bin
    - ./bin/trivy image 192.168.120.24/eshop/$CI_REGISTRY_IMAGE_CART:latest

push-docker-cart:
  stage: deploy
  image: docker:20.10.16
  tags:
    - docker-in-docker
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  dependencies:
    - build-docker-cart
  rules:
    - !reference [.cd_rules, rules]
  script:
    - apk add --no-cache bash
    - docker load -i image_cart.tar
    - |
      MAX_RETRIES=3
      RETRY_COUNT=0
      LOGIN_SUCCESS=false

      while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$LOGIN_SUCCESS" = false ]; do
        if docker login -u admin -p 123 http://192.168.120.24; then
          LOGIN_SUCCESS=true
          echo "Login successful"
        elif docker login --insecure-registry -u admin -p 123 http://192.168.120.24; then
          LOGIN_SUCCESS=true
          echo "Login successful (insecure)"
        else
          RETRY_COUNT=$((RETRY_COUNT+1))
          echo "Login attempt $RETRY_COUNT failed. Retrying in 5 seconds..."
          sleep 5
        fi
      done

      if [ "$LOGIN_SUCCESS" = false ]; then
        echo "Failed to log in after $MAX_RETRIES attempts. Exiting."
        exit 1
      fi
    - docker tag temp_image_cart 192.168.120.24/eshop/$CI_REGISTRY_IMAGE_CART:$CI_COMMIT_SHA
    - docker tag temp_image_cart 192.168.120.24/eshop/$CI_REGISTRY_IMAGE_CART:latest
    - docker push 192.168.120.24/eshop/$CI_REGISTRY_IMAGE_CART:$CI_COMMIT_SHA
    - docker push 192.168.120.24/eshop/$CI_REGISTRY_IMAGE_CART:latest
    - docker rmi temp_image_cart

deploy-dev:
  stage: deploy
  image: alpine:3.19.1
  rules:
    - !reference [.cd_rules, rules]
  before_script:
    - apk add --no-cache git yq
    - git config --global user.email "$CI_EMAIL"
    - git config --global user.name "$GITLAB_USERNAME"
    - git config --global http.sslVerify false
    - git remote set-url origin http://${GITLAB_USERNAME}:${CI_JOB_TOKEN}@192.168.120.73/dncn/retail-eshop.git
    - git fetch origin
  script:
    - export NEW_TAG=${CI_COMMIT_SHA}
    - yq eval '.image.tag = env(NEW_TAG)' -i deploy/kubernetes/charts/carts/values-dev.yaml
    - git checkout dev
    - git fetch origin dev
    - git pull origin dev
    - git diff
    - git merge --no-edit origin/dev
    - git add deploy/kubernetes/charts/carts/values-dev.yaml
    - git commit -m "Update Helm chart version and image tag to ${NEW_TAG}"
    - git push origin dev